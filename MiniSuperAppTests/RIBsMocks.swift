///
/// @Generated by Mockolo
///

import Foundation
import RIBs
import RxRelay
import RxSwift
import UIKit

// MARK: - LaunchRoutingMock

public class LaunchRoutingMock: LaunchRouting {
  public init() {}
  public init(
    lifecycle: Observable<RouterLifecycle> = PublishSubject<RouterLifecycle>(),
    viewControllable: ViewControllable = ViewControllableMock(),
    interactable: Interactable = InteractableMock(),
    children: [Routing] = [Routing]()
  ) {
    self.lifecycle = lifecycle
    self.viewControllable = viewControllable
    self.interactable = interactable
    self.children = children
  }

  public private(set) var launchCallCount = 0
  public var launchHandler: ((UIWindow) -> ())?
  public func launch(from window: UIWindow) {
    self.launchCallCount += 1
    if let launchHandler = launchHandler {
      launchHandler(window)
    }
  }

  private var lifecycleSubjectKind = 0
  public private(set) var lifecycleSubjectSetCallCount = 0
  public var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>
    .create(bufferSize: 1) { didSet { self.lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! {
    didSet { self.lifecycleSubjectSetCallCount += 1 }
  }

  public var _lifecycle: Observable<RouterLifecycle>! { didSet { self.lifecycleSubjectSetCallCount += 1 } }
  public var lifecycle: Observable<RouterLifecycle> {
    get {
      if self.lifecycleSubjectKind == 0 {
        return self.lifecycleSubject
      } else if self.lifecycleSubjectKind == 1 {
        return self.lifecycleBehaviorSubject
      } else if self.lifecycleSubjectKind == 2 {
        return self.lifecycleReplaySubject
      } else {
        return self._lifecycle
      }
    }
    set {
      if let val = newValue as? PublishSubject<RouterLifecycle> {
        self.lifecycleSubject = val
        self.lifecycleSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
        self.lifecycleBehaviorSubject = val
        self.lifecycleSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
        self.lifecycleReplaySubject = val
        self.lifecycleSubjectKind = 2
      } else {
        self._lifecycle = newValue
        self.lifecycleSubjectKind = 3
      }
    }
  }

  public private(set) var viewControllableSetCallCount = 0
  public var viewControllable: ViewControllable = ViewControllableMock() {
    didSet { self.viewControllableSetCallCount += 1 }
  }

  public private(set) var interactableSetCallCount = 0
  public var interactable: Interactable = InteractableMock() { didSet { self.interactableSetCallCount += 1 } }

  public private(set) var childrenSetCallCount = 0
  public var children: [Routing] = .init() { didSet { self.childrenSetCallCount += 1 } }

  public private(set) var loadCallCount = 0
  public var loadHandler: (() -> ())?
  public func load() {
    self.loadCallCount += 1
    if let loadHandler = loadHandler {
      loadHandler()
    }
  }

  public private(set) var attachChildCallCount = 0
  public var attachChildHandler: ((Routing) -> ())?
  public func attachChild(_ child: Routing) {
    self.attachChildCallCount += 1
    if let attachChildHandler = attachChildHandler {
      attachChildHandler(child)
    }
  }

  public private(set) var detachChildCallCount = 0
  public var detachChildHandler: ((Routing) -> ())?
  public func detachChild(_ child: Routing) {
    self.detachChildCallCount += 1
    if let detachChildHandler = detachChildHandler {
      detachChildHandler(child)
    }
  }
}

// MARK: - ViewControllableMock

public class ViewControllableMock: ViewControllable {
  public init() {}
  public init(uiviewController: UIViewController = UIViewController()) {
    self.uiviewController = uiviewController
  }

  public private(set) var uiviewControllerSetCallCount = 0
  public var uiviewController: UIViewController = .init() { didSet { self.uiviewControllerSetCallCount += 1 } }
}

// MARK: - ViewableRoutingMock

public class ViewableRoutingMock: ViewableRouting {
  public init() {}
  public init(
    lifecycle: Observable<RouterLifecycle> = PublishSubject<RouterLifecycle>(),
    viewControllable: ViewControllable = ViewControllableMock(),
    interactable: Interactable = InteractableMock(),
    children: [Routing] = [Routing]()
  ) {
    self.lifecycle = lifecycle
    self.viewControllable = viewControllable
    self.interactable = interactable
    self.children = children
  }

  private var lifecycleSubjectKind = 0
  public private(set) var lifecycleSubjectSetCallCount = 0
  public var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>
    .create(bufferSize: 1) { didSet { self.lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! {
    didSet { self.lifecycleSubjectSetCallCount += 1 }
  }

  public var _lifecycle: Observable<RouterLifecycle>! { didSet { self.lifecycleSubjectSetCallCount += 1 } }
  public var lifecycle: Observable<RouterLifecycle> {
    get {
      if self.lifecycleSubjectKind == 0 {
        return self.lifecycleSubject
      } else if self.lifecycleSubjectKind == 1 {
        return self.lifecycleBehaviorSubject
      } else if self.lifecycleSubjectKind == 2 {
        return self.lifecycleReplaySubject
      } else {
        return self._lifecycle
      }
    }
    set {
      if let val = newValue as? PublishSubject<RouterLifecycle> {
        self.lifecycleSubject = val
        self.lifecycleSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
        self.lifecycleBehaviorSubject = val
        self.lifecycleSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
        self.lifecycleReplaySubject = val
        self.lifecycleSubjectKind = 2
      } else {
        self._lifecycle = newValue
        self.lifecycleSubjectKind = 3
      }
    }
  }

  public private(set) var viewControllableSetCallCount = 0
  public var viewControllable: ViewControllable = ViewControllableMock() {
    didSet { self.viewControllableSetCallCount += 1 }
  }

  public private(set) var interactableSetCallCount = 0
  public var interactable: Interactable = InteractableMock() { didSet { self.interactableSetCallCount += 1 } }

  public private(set) var childrenSetCallCount = 0
  public var children: [Routing] = .init() { didSet { self.childrenSetCallCount += 1 } }

  public private(set) var loadCallCount = 0
  public var loadHandler: (() -> ())?
  public func load() {
    self.loadCallCount += 1
    if let loadHandler = loadHandler {
      loadHandler()
    }
  }

  public private(set) var attachChildCallCount = 0
  public var attachChildHandler: ((Routing) -> ())?
  public func attachChild(_ child: Routing) {
    self.attachChildCallCount += 1
    if let attachChildHandler = attachChildHandler {
      attachChildHandler(child)
    }
  }

  public private(set) var detachChildCallCount = 0
  public var detachChildHandler: ((Routing) -> ())?
  public func detachChild(_ child: Routing) {
    self.detachChildCallCount += 1
    if let detachChildHandler = detachChildHandler {
      detachChildHandler(child)
    }
  }
}

// MARK: - WorkingMock

public class WorkingMock: Working {
  public init() {}
  public init(isStarted: Bool = false, isStartedStream: Observable<Bool> = PublishSubject<Bool>()) {
    self.isStarted = isStarted
    self.isStartedStream = isStartedStream
  }

  public private(set) var startCallCount = 0
  public var startHandler: ((InteractorScope) -> ())?
  public func start(_ interactorScope: InteractorScope) {
    self.startCallCount += 1
    if let startHandler = startHandler {
      startHandler(interactorScope)
    }
  }

  public private(set) var stopCallCount = 0
  public var stopHandler: (() -> ())?
  public func stop() {
    self.stopCallCount += 1
    if let stopHandler = stopHandler {
      stopHandler()
    }
  }

  public private(set) var isStartedSetCallCount = 0
  public var isStarted: Bool = false { didSet { self.isStartedSetCallCount += 1 } }
  private var isStartedStreamSubjectKind = 0
  public private(set) var isStartedStreamSubjectSetCallCount = 0
  public var isStartedStreamSubject = PublishSubject<Bool>() { didSet { isStartedStreamSubjectSetCallCount += 1 } }
  public var isStartedStreamReplaySubject = ReplaySubject<Bool>
    .create(bufferSize: 1) { didSet { self.isStartedStreamSubjectSetCallCount += 1 } }
  public var isStartedStreamBehaviorSubject: BehaviorSubject<Bool>! {
    didSet { self.isStartedStreamSubjectSetCallCount += 1 }
  }

  public var _isStartedStream: Observable<Bool>! { didSet { self.isStartedStreamSubjectSetCallCount += 1 } }
  public var isStartedStream: Observable<Bool> {
    get {
      if self.isStartedStreamSubjectKind == 0 {
        return self.isStartedStreamSubject
      } else if self.isStartedStreamSubjectKind == 1 {
        return self.isStartedStreamBehaviorSubject
      } else if self.isStartedStreamSubjectKind == 2 {
        return self.isStartedStreamReplaySubject
      } else {
        return self._isStartedStream
      }
    }
    set {
      if let val = newValue as? PublishSubject<Bool> {
        self.isStartedStreamSubject = val
        self.isStartedStreamSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<Bool> {
        self.isStartedStreamBehaviorSubject = val
        self.isStartedStreamSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<Bool> {
        self.isStartedStreamReplaySubject = val
        self.isStartedStreamSubjectKind = 2
      } else {
        self._isStartedStream = newValue
        self.isStartedStreamSubjectKind = 3
      }
    }
  }
}

// MARK: - BuildableMock

public class BuildableMock: Buildable {
  public init() {}
}

// MARK: - PresentableMock

public class PresentableMock: Presentable {
  public init() {}
}

// MARK: - InteractorScopeMock

public class InteractorScopeMock: InteractorScope {
  public init() {}
  public init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject<Bool>()) {
    self.isActive = isActive
    self.isActiveStream = isActiveStream
  }

  public private(set) var isActiveSetCallCount = 0
  public var isActive: Bool = false { didSet { self.isActiveSetCallCount += 1 } }
  private var isActiveStreamSubjectKind = 0
  public private(set) var isActiveStreamSubjectSetCallCount = 0
  public var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStreamReplaySubject = ReplaySubject<Bool>
    .create(bufferSize: 1) { didSet { self.isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! {
    didSet { self.isActiveStreamSubjectSetCallCount += 1 }
  }

  public var _isActiveStream: Observable<Bool>! { didSet { self.isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStream: Observable<Bool> {
    get {
      if self.isActiveStreamSubjectKind == 0 {
        return self.isActiveStreamSubject
      } else if self.isActiveStreamSubjectKind == 1 {
        return self.isActiveStreamBehaviorSubject
      } else if self.isActiveStreamSubjectKind == 2 {
        return self.isActiveStreamReplaySubject
      } else {
        return self._isActiveStream
      }
    }
    set {
      if let val = newValue as? PublishSubject<Bool> {
        self.isActiveStreamSubject = val
        self.isActiveStreamSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<Bool> {
        self.isActiveStreamBehaviorSubject = val
        self.isActiveStreamSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<Bool> {
        self.isActiveStreamReplaySubject = val
        self.isActiveStreamSubjectKind = 2
      } else {
        self._isActiveStream = newValue
        self.isActiveStreamSubjectKind = 3
      }
    }
  }
}

// MARK: - RouterScopeMock

public class RouterScopeMock: RouterScope {
  public init() {}
  public init(lifecycle: Observable<RouterLifecycle> = PublishSubject<RouterLifecycle>()) {
    self.lifecycle = lifecycle
  }

  private var lifecycleSubjectKind = 0
  public private(set) var lifecycleSubjectSetCallCount = 0
  public var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>
    .create(bufferSize: 1) { didSet { self.lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! {
    didSet { self.lifecycleSubjectSetCallCount += 1 }
  }

  public var _lifecycle: Observable<RouterLifecycle>! { didSet { self.lifecycleSubjectSetCallCount += 1 } }
  public var lifecycle: Observable<RouterLifecycle> {
    get {
      if self.lifecycleSubjectKind == 0 {
        return self.lifecycleSubject
      } else if self.lifecycleSubjectKind == 1 {
        return self.lifecycleBehaviorSubject
      } else if self.lifecycleSubjectKind == 2 {
        return self.lifecycleReplaySubject
      } else {
        return self._lifecycle
      }
    }
    set {
      if let val = newValue as? PublishSubject<RouterLifecycle> {
        self.lifecycleSubject = val
        self.lifecycleSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
        self.lifecycleBehaviorSubject = val
        self.lifecycleSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
        self.lifecycleReplaySubject = val
        self.lifecycleSubjectKind = 2
      } else {
        self._lifecycle = newValue
        self.lifecycleSubjectKind = 3
      }
    }
  }
}

// MARK: - RoutingMock

public class RoutingMock: Routing {
  public init() {}
  public init(
    lifecycle: Observable<RouterLifecycle> = PublishSubject<RouterLifecycle>(),
    interactable: Interactable = InteractableMock(),
    children: [Routing] = [Routing]()
  ) {
    self.lifecycle = lifecycle
    self.interactable = interactable
    self.children = children
  }

  private var lifecycleSubjectKind = 0
  public private(set) var lifecycleSubjectSetCallCount = 0
  public var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>
    .create(bufferSize: 1) { didSet { self.lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! {
    didSet { self.lifecycleSubjectSetCallCount += 1 }
  }

  public var _lifecycle: Observable<RouterLifecycle>! { didSet { self.lifecycleSubjectSetCallCount += 1 } }
  public var lifecycle: Observable<RouterLifecycle> {
    get {
      if self.lifecycleSubjectKind == 0 {
        return self.lifecycleSubject
      } else if self.lifecycleSubjectKind == 1 {
        return self.lifecycleBehaviorSubject
      } else if self.lifecycleSubjectKind == 2 {
        return self.lifecycleReplaySubject
      } else {
        return self._lifecycle
      }
    }
    set {
      if let val = newValue as? PublishSubject<RouterLifecycle> {
        self.lifecycleSubject = val
        self.lifecycleSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
        self.lifecycleBehaviorSubject = val
        self.lifecycleSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
        self.lifecycleReplaySubject = val
        self.lifecycleSubjectKind = 2
      } else {
        self._lifecycle = newValue
        self.lifecycleSubjectKind = 3
      }
    }
  }

  public private(set) var interactableSetCallCount = 0
  public var interactable: Interactable = InteractableMock() { didSet { self.interactableSetCallCount += 1 } }

  public private(set) var childrenSetCallCount = 0
  public var children: [Routing] = .init() { didSet { self.childrenSetCallCount += 1 } }

  public private(set) var loadCallCount = 0
  public var loadHandler: (() -> ())?
  public func load() {
    self.loadCallCount += 1
    if let loadHandler = loadHandler {
      loadHandler()
    }
  }

  public private(set) var attachChildCallCount = 0
  public var attachChildHandler: ((Routing) -> ())?
  public func attachChild(_ child: Routing) {
    self.attachChildCallCount += 1
    if let attachChildHandler = attachChildHandler {
      attachChildHandler(child)
    }
  }

  public private(set) var detachChildCallCount = 0
  public var detachChildHandler: ((Routing) -> ())?
  public func detachChild(_ child: Routing) {
    self.detachChildCallCount += 1
    if let detachChildHandler = detachChildHandler {
      detachChildHandler(child)
    }
  }
}

// MARK: - InteractableMock

public class InteractableMock: Interactable {
  public init() {}
  public init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject<Bool>()) {
    self.isActive = isActive
    self.isActiveStream = isActiveStream
  }

  public private(set) var isActiveSetCallCount = 0
  public var isActive: Bool = false { didSet { self.isActiveSetCallCount += 1 } }
  private var isActiveStreamSubjectKind = 0
  public private(set) var isActiveStreamSubjectSetCallCount = 0
  public var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStreamReplaySubject = ReplaySubject<Bool>
    .create(bufferSize: 1) { didSet { self.isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! {
    didSet { self.isActiveStreamSubjectSetCallCount += 1 }
  }

  public var _isActiveStream: Observable<Bool>! { didSet { self.isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStream: Observable<Bool> {
    get {
      if self.isActiveStreamSubjectKind == 0 {
        return self.isActiveStreamSubject
      } else if self.isActiveStreamSubjectKind == 1 {
        return self.isActiveStreamBehaviorSubject
      } else if self.isActiveStreamSubjectKind == 2 {
        return self.isActiveStreamReplaySubject
      } else {
        return self._isActiveStream
      }
    }
    set {
      if let val = newValue as? PublishSubject<Bool> {
        self.isActiveStreamSubject = val
        self.isActiveStreamSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<Bool> {
        self.isActiveStreamBehaviorSubject = val
        self.isActiveStreamSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<Bool> {
        self.isActiveStreamReplaySubject = val
        self.isActiveStreamSubjectKind = 2
      } else {
        self._isActiveStream = newValue
        self.isActiveStreamSubjectKind = 3
      }
    }
  }

  public private(set) var activateCallCount = 0
  public var activateHandler: (() -> ())?
  public func activate() {
    self.activateCallCount += 1
    if let activateHandler = activateHandler {
      activateHandler()
    }
  }

  public private(set) var deactivateCallCount = 0
  public var deactivateHandler: (() -> ())?
  public func deactivate() {
    self.deactivateCallCount += 1
    if let deactivateHandler = deactivateHandler {
      deactivateHandler()
    }
  }
}
