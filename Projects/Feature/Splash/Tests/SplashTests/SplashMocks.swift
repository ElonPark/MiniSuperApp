///
/// @Generated by Mockolo
///

import Foundation
import RIBs
import RxRelay
import RxSwift
@testable import Splash
import SplashInterface

// MARK: - BootstrapRepositoryMock

final class BootstrapRepositoryMock: BootstrapRepository {
  init() {}

  private(set) var requestBootstrappingCallCount = 0
  var requestBootstrappingHandler: (() -> (Single<Void>))?
  func requestBootstrapping() -> Single<Void> {
    self.requestBootstrappingCallCount += 1
    if let requestBootstrappingHandler = requestBootstrappingHandler {
      return requestBootstrappingHandler()
    }
    fatalError("requestBootstrappingHandler returns can't have a default value thus its handler must be set")
  }
}

// MARK: - SplashListenerMock

public final class SplashListenerMock: SplashListener {
  public init() {}

  public private(set) var initializationCompleteCallCount = 0
  public var initializationCompleteHandler: (() -> ())?
  public func initializationComplete() {
    self.initializationCompleteCallCount += 1
    if let initializationCompleteHandler = initializationCompleteHandler {
      initializationCompleteHandler()
    }
  }
}

// MARK: - SplashPresentableMock

final class SplashPresentableMock: SplashPresentable {
  init() {}
  init(listener: SplashPresentableListener? = nil) {
    self.listener = listener
  }

  private(set) var listenerSetCallCount = 0
  var listener: SplashPresentableListener? { didSet { self.listenerSetCallCount += 1 } }

  private(set) var displaySplashCallCount = 0
  var displaySplashHandler: ((SplashModels.Splash.ViewModel) -> ())?
  func displaySplash(viewModel: SplashModels.Splash.ViewModel) {
    self.displaySplashCallCount += 1
    if let displaySplashHandler = displaySplashHandler {
      displaySplashHandler(viewModel)
    }
  }

  private(set) var displayBootstrapCallCount = 0
  var displayBootstrapHandler: ((SplashModels.Bootstrap.ViewModel) -> ())?
  func displayBootstrap(viewModel: SplashModels.Bootstrap.ViewModel) {
    self.displayBootstrapCallCount += 1
    if let displayBootstrapHandler = displayBootstrapHandler {
      displayBootstrapHandler(viewModel)
    }
  }
}
