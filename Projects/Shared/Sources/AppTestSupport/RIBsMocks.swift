//
// @Generated by Mockolo
//

import Foundation
import RIBs
import RxRelay
import RxSwift
import UIKit

// MARK: - LaunchRoutingMock

public class LaunchRoutingMock: LaunchRouting {
  public init() {}
  public init(
    lifecycle: Observable<RouterLifecycle> = PublishSubject<RouterLifecycle>(),
    viewControllable: ViewControllable = ViewControllableMock(),
    interactable: Interactable = InteractableMock(),
    children: [Routing] = [Routing]()
  ) {
    self.lifecycle = lifecycle
    self.viewControllable = viewControllable
    self.interactable = interactable
    self.children = children
  }

  public private(set) var launchCallCount = 0
  public var launchHandler: ((UIWindow) -> Void)?
  public func launch(from window: UIWindow) {
    launchCallCount += 1
    if let launchHandler {
      launchHandler(window)
    }
  }

  private var lifecycleSubjectKind = 0
  public private(set) var lifecycleSubjectSetCallCount = 0
  public var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>
    .create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! {
    didSet { lifecycleSubjectSetCallCount += 1 }
  }

  public var _lifecycle: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycle: Observable<RouterLifecycle> {
    get {
      if lifecycleSubjectKind == 0 {
        return lifecycleSubject
      } else if lifecycleSubjectKind == 1 {
        return lifecycleBehaviorSubject
      } else if lifecycleSubjectKind == 2 {
        return lifecycleReplaySubject
      } else {
        return _lifecycle
      }
    }
    set {
      if let val = newValue as? PublishSubject<RouterLifecycle> {
        lifecycleSubject = val
        lifecycleSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
        lifecycleBehaviorSubject = val
        lifecycleSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
        lifecycleReplaySubject = val
        lifecycleSubjectKind = 2
      } else {
        _lifecycle = newValue
        lifecycleSubjectKind = 3
      }
    }
  }

  public private(set) var viewControllableSetCallCount = 0
  public var viewControllable: ViewControllable = ViewControllableMock() {
    didSet { viewControllableSetCallCount += 1 }
  }

  public private(set) var interactableSetCallCount = 0
  public var interactable: Interactable = InteractableMock() { didSet { interactableSetCallCount += 1 } }

  public private(set) var childrenSetCallCount = 0
  public var children: [Routing] = .init() { didSet { childrenSetCallCount += 1 } }

  public private(set) var loadCallCount = 0
  public var loadHandler: (() -> Void)?
  public func load() {
    loadCallCount += 1
    if let loadHandler {
      loadHandler()
    }
  }

  public private(set) var attachChildCallCount = 0
  public var attachChildHandler: ((Routing) -> Void)?
  public func attachChild(_ child: Routing) {
    attachChildCallCount += 1
    if let attachChildHandler {
      attachChildHandler(child)
    }
  }

  public private(set) var detachChildCallCount = 0
  public var detachChildHandler: ((Routing) -> Void)?
  public func detachChild(_ child: Routing) {
    detachChildCallCount += 1
    if let detachChildHandler {
      detachChildHandler(child)
    }
  }
}

// MARK: - ViewControllableMock

public class ViewControllableMock: ViewControllable {
  public init() {}
  public init(uiviewController: UIViewController = UIViewController()) {
    self.uiviewController = uiviewController
  }

  public private(set) var uiviewControllerSetCallCount = 0
  public var uiviewController: UIViewController = .init() { didSet { uiviewControllerSetCallCount += 1 } }
}

// MARK: - ViewableRoutingMock

public class ViewableRoutingMock: ViewableRouting {
  public init() {}
  public init(
    lifecycle: Observable<RouterLifecycle> = PublishSubject<RouterLifecycle>(),
    viewControllable: ViewControllable = ViewControllableMock(),
    interactable: Interactable = InteractableMock(),
    children: [Routing] = [Routing]()
  ) {
    self.lifecycle = lifecycle
    self.viewControllable = viewControllable
    self.interactable = interactable
    self.children = children
  }

  private var lifecycleSubjectKind = 0
  public private(set) var lifecycleSubjectSetCallCount = 0
  public var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>
    .create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! {
    didSet { lifecycleSubjectSetCallCount += 1 }
  }

  public var _lifecycle: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycle: Observable<RouterLifecycle> {
    get {
      if lifecycleSubjectKind == 0 {
        return lifecycleSubject
      } else if lifecycleSubjectKind == 1 {
        return lifecycleBehaviorSubject
      } else if lifecycleSubjectKind == 2 {
        return lifecycleReplaySubject
      } else {
        return _lifecycle
      }
    }
    set {
      if let val = newValue as? PublishSubject<RouterLifecycle> {
        lifecycleSubject = val
        lifecycleSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
        lifecycleBehaviorSubject = val
        lifecycleSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
        lifecycleReplaySubject = val
        lifecycleSubjectKind = 2
      } else {
        _lifecycle = newValue
        lifecycleSubjectKind = 3
      }
    }
  }

  public private(set) var viewControllableSetCallCount = 0
  public var viewControllable: ViewControllable = ViewControllableMock() {
    didSet { viewControllableSetCallCount += 1 }
  }

  public private(set) var interactableSetCallCount = 0
  public var interactable: Interactable = InteractableMock() { didSet { interactableSetCallCount += 1 } }

  public private(set) var childrenSetCallCount = 0
  public var children: [Routing] = .init() { didSet { childrenSetCallCount += 1 } }

  public private(set) var loadCallCount = 0
  public var loadHandler: (() -> Void)?
  public func load() {
    loadCallCount += 1
    if let loadHandler {
      loadHandler()
    }
  }

  public private(set) var attachChildCallCount = 0
  public var attachChildHandler: ((Routing) -> Void)?
  public func attachChild(_ child: Routing) {
    attachChildCallCount += 1
    if let attachChildHandler {
      attachChildHandler(child)
    }
  }

  public private(set) var detachChildCallCount = 0
  public var detachChildHandler: ((Routing) -> Void)?
  public func detachChild(_ child: Routing) {
    detachChildCallCount += 1
    if let detachChildHandler {
      detachChildHandler(child)
    }
  }
}

// MARK: - WorkingMock

public class WorkingMock: Working {
  public init() {}
  public init(isStarted: Bool = false, isStartedStream: Observable<Bool> = PublishSubject<Bool>()) {
    self.isStarted = isStarted
    self.isStartedStream = isStartedStream
  }

  public private(set) var startCallCount = 0
  public var startHandler: ((InteractorScope) -> Void)?
  public func start(_ interactorScope: InteractorScope) {
    startCallCount += 1
    if let startHandler {
      startHandler(interactorScope)
    }
  }

  public private(set) var stopCallCount = 0
  public var stopHandler: (() -> Void)?
  public func stop() {
    stopCallCount += 1
    if let stopHandler {
      stopHandler()
    }
  }

  public private(set) var isStartedSetCallCount = 0
  public var isStarted: Bool = false { didSet { isStartedSetCallCount += 1 } }
  private var isStartedStreamSubjectKind = 0
  public private(set) var isStartedStreamSubjectSetCallCount = 0
  public var isStartedStreamSubject = PublishSubject<Bool>() { didSet { isStartedStreamSubjectSetCallCount += 1 } }
  public var isStartedStreamReplaySubject = ReplaySubject<Bool>
    .create(bufferSize: 1) { didSet { isStartedStreamSubjectSetCallCount += 1 } }
  public var isStartedStreamBehaviorSubject: BehaviorSubject<Bool>! {
    didSet { isStartedStreamSubjectSetCallCount += 1 }
  }

  public var _isStartedStream: Observable<Bool>! { didSet { isStartedStreamSubjectSetCallCount += 1 } }
  public var isStartedStream: Observable<Bool> {
    get {
      if isStartedStreamSubjectKind == 0 {
        return isStartedStreamSubject
      } else if isStartedStreamSubjectKind == 1 {
        return isStartedStreamBehaviorSubject
      } else if isStartedStreamSubjectKind == 2 {
        return isStartedStreamReplaySubject
      } else {
        return _isStartedStream
      }
    }
    set {
      if let val = newValue as? PublishSubject<Bool> {
        isStartedStreamSubject = val
        isStartedStreamSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<Bool> {
        isStartedStreamBehaviorSubject = val
        isStartedStreamSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<Bool> {
        isStartedStreamReplaySubject = val
        isStartedStreamSubjectKind = 2
      } else {
        _isStartedStream = newValue
        isStartedStreamSubjectKind = 3
      }
    }
  }
}

// MARK: - BuildableMock

public class BuildableMock: Buildable {
  public init() {}
}

// MARK: - PresentableMock

public class PresentableMock: Presentable {
  public init() {}
}

// MARK: - InteractorScopeMock

public class InteractorScopeMock: InteractorScope {
  public init() {}
  public init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject<Bool>()) {
    self.isActive = isActive
    self.isActiveStream = isActiveStream
  }

  public private(set) var isActiveSetCallCount = 0
  public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }
  private var isActiveStreamSubjectKind = 0
  public private(set) var isActiveStreamSubjectSetCallCount = 0
  public var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStreamReplaySubject = ReplaySubject<Bool>
    .create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! {
    didSet { isActiveStreamSubjectSetCallCount += 1 }
  }

  public var _isActiveStream: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStream: Observable<Bool> {
    get {
      if isActiveStreamSubjectKind == 0 {
        return isActiveStreamSubject
      } else if isActiveStreamSubjectKind == 1 {
        return isActiveStreamBehaviorSubject
      } else if isActiveStreamSubjectKind == 2 {
        return isActiveStreamReplaySubject
      } else {
        return _isActiveStream
      }
    }
    set {
      if let val = newValue as? PublishSubject<Bool> {
        isActiveStreamSubject = val
        isActiveStreamSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<Bool> {
        isActiveStreamBehaviorSubject = val
        isActiveStreamSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<Bool> {
        isActiveStreamReplaySubject = val
        isActiveStreamSubjectKind = 2
      } else {
        _isActiveStream = newValue
        isActiveStreamSubjectKind = 3
      }
    }
  }
}

// MARK: - RouterScopeMock

public class RouterScopeMock: RouterScope {
  public init() {}
  public init(lifecycle: Observable<RouterLifecycle> = PublishSubject<RouterLifecycle>()) {
    self.lifecycle = lifecycle
  }

  private var lifecycleSubjectKind = 0
  public private(set) var lifecycleSubjectSetCallCount = 0
  public var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>
    .create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! {
    didSet { lifecycleSubjectSetCallCount += 1 }
  }

  public var _lifecycle: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycle: Observable<RouterLifecycle> {
    get {
      if lifecycleSubjectKind == 0 {
        return lifecycleSubject
      } else if lifecycleSubjectKind == 1 {
        return lifecycleBehaviorSubject
      } else if lifecycleSubjectKind == 2 {
        return lifecycleReplaySubject
      } else {
        return _lifecycle
      }
    }
    set {
      if let val = newValue as? PublishSubject<RouterLifecycle> {
        lifecycleSubject = val
        lifecycleSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
        lifecycleBehaviorSubject = val
        lifecycleSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
        lifecycleReplaySubject = val
        lifecycleSubjectKind = 2
      } else {
        _lifecycle = newValue
        lifecycleSubjectKind = 3
      }
    }
  }
}

// MARK: - RoutingMock

public class RoutingMock: Routing {
  public init() {}
  public init(
    lifecycle: Observable<RouterLifecycle> = PublishSubject<RouterLifecycle>(),
    interactable: Interactable = InteractableMock(),
    children: [Routing] = [Routing]()
  ) {
    self.lifecycle = lifecycle
    self.interactable = interactable
    self.children = children
  }

  private var lifecycleSubjectKind = 0
  public private(set) var lifecycleSubjectSetCallCount = 0
  public var lifecycleSubject = PublishSubject<RouterLifecycle>() { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>
    .create(bufferSize: 1) { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! {
    didSet { lifecycleSubjectSetCallCount += 1 }
  }

  public var _lifecycle: Observable<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
  public var lifecycle: Observable<RouterLifecycle> {
    get {
      if lifecycleSubjectKind == 0 {
        return lifecycleSubject
      } else if lifecycleSubjectKind == 1 {
        return lifecycleBehaviorSubject
      } else if lifecycleSubjectKind == 2 {
        return lifecycleReplaySubject
      } else {
        return _lifecycle
      }
    }
    set {
      if let val = newValue as? PublishSubject<RouterLifecycle> {
        lifecycleSubject = val
        lifecycleSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
        lifecycleBehaviorSubject = val
        lifecycleSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
        lifecycleReplaySubject = val
        lifecycleSubjectKind = 2
      } else {
        _lifecycle = newValue
        lifecycleSubjectKind = 3
      }
    }
  }

  public private(set) var interactableSetCallCount = 0
  public var interactable: Interactable = InteractableMock() { didSet { interactableSetCallCount += 1 } }

  public private(set) var childrenSetCallCount = 0
  public var children: [Routing] = .init() { didSet { childrenSetCallCount += 1 } }

  public private(set) var loadCallCount = 0
  public var loadHandler: (() -> Void)?
  public func load() {
    loadCallCount += 1
    if let loadHandler {
      loadHandler()
    }
  }

  public private(set) var attachChildCallCount = 0
  public var attachChildHandler: ((Routing) -> Void)?
  public func attachChild(_ child: Routing) {
    attachChildCallCount += 1
    if let attachChildHandler {
      attachChildHandler(child)
    }
  }

  public private(set) var detachChildCallCount = 0
  public var detachChildHandler: ((Routing) -> Void)?
  public func detachChild(_ child: Routing) {
    detachChildCallCount += 1
    if let detachChildHandler {
      detachChildHandler(child)
    }
  }
}

// MARK: - InteractableMock

public class InteractableMock: Interactable {
  public init() {}
  public init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject<Bool>()) {
    self.isActive = isActive
    self.isActiveStream = isActiveStream
  }

  public private(set) var isActiveSetCallCount = 0
  public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }
  private var isActiveStreamSubjectKind = 0
  public private(set) var isActiveStreamSubjectSetCallCount = 0
  public var isActiveStreamSubject = PublishSubject<Bool>() { didSet { isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStreamReplaySubject = ReplaySubject<Bool>
    .create(bufferSize: 1) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStreamBehaviorSubject: BehaviorSubject<Bool>! {
    didSet { isActiveStreamSubjectSetCallCount += 1 }
  }

  public var _isActiveStream: Observable<Bool>! { didSet { isActiveStreamSubjectSetCallCount += 1 } }
  public var isActiveStream: Observable<Bool> {
    get {
      if isActiveStreamSubjectKind == 0 {
        return isActiveStreamSubject
      } else if isActiveStreamSubjectKind == 1 {
        return isActiveStreamBehaviorSubject
      } else if isActiveStreamSubjectKind == 2 {
        return isActiveStreamReplaySubject
      } else {
        return _isActiveStream
      }
    }
    set {
      if let val = newValue as? PublishSubject<Bool> {
        isActiveStreamSubject = val
        isActiveStreamSubjectKind = 0
      } else if let val = newValue as? BehaviorSubject<Bool> {
        isActiveStreamBehaviorSubject = val
        isActiveStreamSubjectKind = 1
      } else if let val = newValue as? ReplaySubject<Bool> {
        isActiveStreamReplaySubject = val
        isActiveStreamSubjectKind = 2
      } else {
        _isActiveStream = newValue
        isActiveStreamSubjectKind = 3
      }
    }
  }

  public private(set) var activateCallCount = 0
  public var activateHandler: (() -> Void)?
  public func activate() {
    activateCallCount += 1
    if let activateHandler {
      activateHandler()
    }
  }

  public private(set) var deactivateCallCount = 0
  public var deactivateHandler: (() -> Void)?
  public func deactivate() {
    deactivateCallCount += 1
    if let deactivateHandler {
      deactivateHandler()
    }
  }
}
